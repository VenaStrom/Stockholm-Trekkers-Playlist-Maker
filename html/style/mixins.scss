@use "variables.scss" as *;

// Display Types
//
//   ||\\   ||  /==\  ||==\  ||      ||   ||  ||
//   || ||  ||   \\   ||==/  ||     |==|    ||
//   ||//   ||  \==/  ||     ||||  ||  ||   ||
// 
@mixin row($justify: start, $align: center, $wrap: nowrap) {
    display: flex;
    flex-flow: row $wrap;

    justify-content: $justify;
    align-items: $align;
}

@mixin column($justify: center, $align: start, $wrap: nowrap) {
    display: flex;
    flex-flow: column $wrap;

    justify-content: $justify;
    align-items: $align;
}

@mixin grid($columns: 1, $rows: 1) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    grid-template-rows: repeat($rows, 1fr);
}

@mixin hidden() {
    display: none !important;
}

// Spacing
//
//   /==\  ||==\    ||    /==\  ||  || ||  /==
//    \\   ||==/   |==|   ||    ||  ||\||  || _
//   \==/  ||     ||  ||  \==/  ||  || ||  \==/
//
@mixin gap($rowOrBoth: false, $column: false, $row: false) {
    --gap-0: 0;
    --gap-none: 0;
    --gap-3xs: 0.05rem;
    --gap-2xs: 0.1rem;
    --gap-xs: 0.15rem;
    --gap-s: 0.25rem;
    --gap-m: 0.5rem;
    --gap-l: 0.75rem;
    --gap-xl: 1rem;
    --gap-default: var(--gap-m);

    // None defined: apply default gap
    @if not $rowOrBoth and not $column and not $row {
        gap: var(--gap-default);
    }

    // First defined: set both gaps to first argument
    @else if $rowOrBoth and not $column and not $row {
        gap: var(--gap-#{$rowOrBoth});
    }

    // First and column defined: set both gaps respectively
    @else if $rowOrBoth and $column and not $row {
        gap: var(--gap-#{$rowOrBoth}) var(--gap-#{$column});
    }

    @else {

        // If column: set column
        @if $column {
            column-gap: var(--gap-#{$column});
        }

        // If row: set row
        @if $row {
            row-gap: var(--gap-#{$row});
        }
    }
}

@mixin padding($top: false, $right: false, $bottom: false, $left: false) {
    --padding-0: 0;
    --padding-none: 0;
    --padding-2xs: 0.1rem;
    --padding-xs: 0.15rem;
    --padding-s: 0.25rem;
    --padding-m: 0.5rem;
    --padding-l: 0.75rem;
    --padding-xl: 1rem;
    --padding-2xl: 1.5rem;
    --padding-3xl: 2rem;
    --padding-4xl: 5dvh;
    --padding-5xl: 10dvh;
    --padding-6xl: 15dvh;
    --padding-7xl: 20dvh;
    --padding-8xl: 25dvh;
    --padding-default: var(--padding-m);

    // Non-positional arguments
    @if $top {
        padding-top: var(--padding-#{$top});
    }

    @if $right {
        padding-right: var(--padding-#{$right});
    }

    @if $bottom {
        padding-bottom: var(--padding-#{$bottom});
    }

    @if $left {
        padding-left: var(--padding-#{$left});
    }

    // Positional arguments
    // None defined: apply default padding
    @if not $top and not $right and not $bottom and not $left {
        padding: var(--padding-default);
    }

    // Four defined: apply to all sides
    @else if $top and $right and $bottom and $left {
        padding: var(--padding-#{$top}) var(--padding-#{$right}) var(--padding-#{$bottom}) var(--padding-#{$left});
    }

    // Two defined: apply up-down and side-side
    @else if $top and $right and not $bottom and not $left {
        padding: var(--padding-#{$top}) var(--padding-#{$right});
    }

    // One defined: apply to all sides
    @else if $top and not $right and not $bottom and not $left {
        padding: var(--padding-#{$top});
    }
}

@mixin margin($top: false, $right: false, $bottom: false, $left: false) {
    --margin-0: 0;
    --margin-none: 0;
    --margin-2xs: 0.1rem;
    --margin-xs: 0.15rem;
    --margin-s: 0.25rem;
    --margin-m: 0.5rem;
    --margin-l: 0.75rem;
    --margin-xl: 1rem;
    --margin-2xl: 1.5rem;
    --margin-3xl: 2rem;
    --margin-4xl: 5dvh;
    --margin-5xl: 10dvh;
    --margin-6xl: 15dvh;
    --margin-7xl: 20dvh;
    --margin-8xl: 25dvh;
    --margin-default: var(--margin-m);

    // Non-positional arguments
    @if $top {
        margin-top: var(--margin-#{$top});
    }

    @if $right {
        margin-right: var(--margin-#{$right});
    }

    @if $bottom {
        margin-bottom: var(--margin-#{$bottom});
    }

    @if $left {
        margin-left: var(--margin-#{$left});
    }

    // Positional arguments
    // None defined: apply default margin
    @if not $top and not $right and not $bottom and not $left {
        margin: var(--margin-default);
    }

    // Four defined: apply to all sides
    @else if $top and $right and $bottom and $left {
        margin: var(--margin-#{$top}) var(--margin-#{$right}) var(--margin-#{$bottom}) var(--margin-#{$left});
    }

    // Two defined: apply up-down and side-side
    @else if $top and $right and not $bottom and not $left {
        margin: var(--margin-#{$top}) var(--margin-#{$right});
    }

    // One defined: apply to all sides
    @else if $top and not $right and not $bottom and not $left {
        margin: var(--margin-#{$top});
    }
}


// Sizing
//
//   /==\  ||  ||=||  ||  || ||  /==
//    \\   ||    /    ||  ||\||  || _
//   \==/  ||  ||=||  ||  || ||  \==/
//
@mixin width($size: m) {
    --width-xs: 5dvw;
    --width-s: 10dvw;
    --width-m: 15dvw;
    --width-l: 20dvw;
    --width-xl: 25dvw;
    --width-2xl: 30dvw;
    --width-3xl: 35dvw;
    --width-4xl: 40dvw;
    --width-5xl: 45dvw;
    --width-6xl: 50dvw;
    --width-7xl: 55dvw;
    --width-8xl: 60dvw;
    --width-9xl: 65dvw;
    --width-10xl: 70dvw;
    --width-11xl: 75dvw;
    --width-12xl: 80dvw;
    --width-13xl: 85dvw;
    --width-14xl: 90dvw;
    --width-15xl: 95dvw;
    --width-max: 100dvw;

    width: var(--width-#{$size});

    @media (max-width: 1000px) {
        width: calc(var(--width-#{$size}) * 2);
    }
}

@mixin height($size: m) {
    --height-xs: 5dvh;
    --height-s: 10dvh;
    --height-m: 15dvh;
    --height-l: 20dvh;
    --height-xl: 25dvh;
    --height-2xl: 30dvh;
    --height-3xl: 35dvh;
    --height-4xl: 40dvh;
    --height-5xl: 45dvh;
    --height-6xl: 50dvh;
    --height-7xl: 55dvh;
    --height-8xl: 60dvh;
    --height-9xl: 65dvh;
    --height-10xl: 70dvh;
    --height-11xl: 75dvh;
    --height-12xl: 80dvh;
    --height-13xl: 85dvh;
    --height-14xl: 90dvh;
    --height-15xl: 95dvh;
    --height-max: 100dvh;

    height: var(--height-#{$size});

    @media (max-height: 600px) {
        height: calc(var(--height-#{$size}) * 2);
    }
}


// Text
// 
//   ||==||  ||==  ||  ||  ||==||
//     ||    ||==    ||      ||
//     ||    ||==  ||  ||    ||
//
@mixin text-size($size: m) {
    --text-size-s: 0.9rem;
    --text-size-m: 1rem;
    --text-size-l: 1.1rem;
    --text-size-xl: 1.25rem;
    --text-size-2xl: 1.5rem;
    --text-size-title: 2rem;
    --text-size-x-title: 2.5rem;
    --text-size-xx-title: 3rem;

    font-size: var(--text-size-#{$size});
}

@mixin bold() {
    font-weight: bold;
}

@mixin thin() {
    font-weight: lighter;
}

@mixin italic() {
    font-style: italic;
}


// Border
//
//  ||\   /==\   ||==\  ||\\   ||==  ||==\
//  ||<  ||  ||  ||==/  || ||  ||==  ||==/
//  ||/   \==/   || \\  ||//   ||==  || \\
//
@mixin border($thickness: m, $color: var(--color-low)) {
    --border-thickness-thin: 0.1rem;
    --border-thickness-m: 0.2rem;
    --border-thickness-thick: 0.3rem;
    --border-thickness-x-thick: 0.4rem;

    border: var(--border-thickness-#{$thickness}) solid $color;
}

@mixin border-radius($radius: m) {
    --border-radius-xs: 0.15rem;
    --border-radius-s: 0.25rem;
    --border-radius-m: 0.5rem;
    --border-radius-l: 0.75rem;
    --border-radius-xl: 1rem;

    border-radius: var(--border-radius-#{$radius});
}

@mixin outline() {
    &:focus {
        outline: var(--color-primary) solid 0.1rem;
    }
}

// Functions
//
//   ||==  || ||  || ||  /==\  ||==||  ||   /==\   || ||  /==\                                                                                                                                                   
//   ||==  || ||  ||\||  ||      ||    ||  ||  ||  ||\||   \\                                                                                                                                               
//   ||     |||   || ||  \==/    ||    ||   \==/   || ||  \==/                                                                                                                                         
//
@mixin icon($size: m, $filter: var(--filter-to-color-fg), $hover: true) {
    --icon-size-5xs: 0.3rem;
    --icon-size-4xs: 0.6rem;
    --icon-size-3xs: 0.75rem;
    --icon-size-2xs: 1rem;
    --icon-size-xs: 1.2rem;
    --icon-size-s: 2rem;
    --icon-size-m: 2.7rem;
    --icon-size-l: 4rem;
    --icon-size-xl: 5rem;
    --icon-size-2xl: 6rem;
    --icon-size-3xl: 7rem;
    --icon-size-4xl: 8rem;

    height: var(--icon-size-#{$size});
    width: var(--icon-size-#{$size});

    aspect-ratio: 1/1;

    user-select: none;

    filter: $filter;

    @if $hover {
        cursor: pointer;

        &:hover {
            filter: var(--filter-to-color-primary);
        }
    }
}

@mixin hairline($position, $thickness: 0.02rem) {
    border-#{$position}: solid $thickness var(--color-gray);
}

@mixin round-box() {
    @include column($justify: start, $align: center);
    @include margin(xs);
    @include border-radius(l);
    @include border();

    min-width: 20ch;
    min-height: 5rem;

    overflow: hidden; // Corners of header were showing

    &>* {
        width: 100%;
    }

    &>.header {
        @include row($justify: center, $align: center);
        @include padding(m, l, s, l);
        @include text-size(l);

        // With infill
        &:not(.none) {
            @include row($justify: start, $align: center);
            @include padding(m, xl);

            background-color: var(--color-low);
        }
    }

    &>.main {
        @include column($justify: start, $align: start);
        @include padding(m, 2xl, m, 2xl);
        @include thin();

        flex: 1;

        &>button,
        &>input {
            align-self: center;
        }

        & .progress-bar {
            @include border(thick, var(--color-low));
            @include border-radius(m);

            width: 100%;
            height: 1.5rem;

            // Base color
            background-color: var(--color-bg);

            // Progress
            background-image: linear-gradient(var(--color-primary), var(--color-primary));
            background-repeat: no-repeat;
            background-size: 0%;

            &.warning {
                background-image: linear-gradient(var(--color-warning), var(--color-warning));
            }
        }
    }
}